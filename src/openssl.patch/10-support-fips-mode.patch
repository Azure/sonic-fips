diff --git a/crypto/init.c b/crypto/init.c
index 1b0d523bea..31fbd42cd2 100644
--- a/crypto/init.c
+++ b/crypto/init.c
@@ -404,6 +404,67 @@ DEFINE_RUN_ONCE_STATIC(ossl_init_engine_afalg)
 # endif
 #endif
 
+# ifndef OPENSSL_NO_SYMCRYPT_ENGINE
+static CRYPTO_ONCE engine_symcrypt = CRYPTO_ONCE_STATIC_INIT;
+DEFINE_RUN_ONCE_STATIC(ossl_init_engine_symcrypt)
+{
+    int ret = 0;
+
+    // Get the default engine directory from the environment - may be NULL
+    char* load_dir = ossl_safe_getenv("OPENSSL_ENGINES");
+
+    #ifdef ENGINESDIR
+    // Use the default engines directory, if defined
+    if(load_dir == NULL)
+    {
+            load_dir = ENGINESDIR;
+    }
+    #endif
+
+    ENGINE *dynamic = NULL;
+    ENGINE *symcrypt = NULL;
+
+    dynamic = ENGINE_by_id("dynamic");
+    if (!dynamic)
+        goto err;
+
+    // Add the engines directory to the list of directories to load from and specify that loading
+    // from the directory list is mandatory (via DIR_LOAD = 2). Otherwise OpenSSL will try to load
+    // the engine from the default ld search path, fail, and skip loading from the engines dir.
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_ADD", load_dir, 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_LOAD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "SO_PATH", "symcryptengine.so", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "ID", "symcrypt", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LIST_ADD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LOAD", NULL, 0))
+        goto err;
+
+    symcrypt = ENGINE_by_id("symcrypt");
+    if (!symcrypt)
+        goto err;
+
+    // Make SymCrypt the default engine for all algorithms
+    if (!ENGINE_set_default_string(symcrypt, "ALL"))
+        goto err;
+
+err:
+    ENGINE_free(symcrypt);
+    ENGINE_free(dynamic);
+
+#  ifdef OPENSSL_INIT_DEBUG
+    fprintf(stderr, "OPENSSL_INIT: ossl_init_engine_symcrypt: %d\n",
+        ret);
+#  endif
+
+    return ret;
+}
+# endif
+
 #ifndef OPENSSL_NO_COMP
 static CRYPTO_ONCE zlib = CRYPTO_ONCE_STATIC_INIT;
 
@@ -612,6 +673,72 @@ void OPENSSL_cleanup(void)
     base_inited = 0;
 }
 
+#define BUZZ_SIZE 4096
+#define PROC_CMDLINE "/proc/cmdline"
+#define FIPS_ENABLE_CONF "/etc/fips/fips_enable"
+#define FIPS_OPENSSL_CONFIG "/usr/lib/ssl/openssl-fips.cnf"
+int g_fips_mode_enabled = -1;
+// Check if the fips is enabled by command line
+int ossl_fips_enabled_by_cmd(){
+    int enabled = 0;
+    FILE * fp = NULL;
+    char buff[BUZZ_SIZE] = "";
+    if((fp = fopen(PROC_CMDLINE, "r")) != NULL){
+        fgets(buff, BUZZ_SIZE, fp);
+        char * token = strtok(buff, " \n");
+        while( token != NULL ) {
+            if (strcmp(token, "fips=1") == 0){
+                enabled = 1;
+                break;
+            }
+            if (strcmp(token, "sonic_fips=1") == 0){
+                enabled = 1;
+                break;
+            }
+            token = strtok(NULL, " \n");
+        }
+
+        fclose(fp);
+    }
+
+    return enabled;
+}
+
+// Check if fips is enabled by config
+int ossl_fips_enabled_by_conf(){
+    int enabled = 0;
+    FILE * fp = NULL;
+    char buff[BUZZ_SIZE] = "";
+    if((fp = fopen(FIPS_ENABLE_CONF, "r")) != NULL ){
+        fgets(buff, BUZZ_SIZE, fp);
+        if (strlen(buff) > 0 && buff[0] == '1') {
+            enabled = 1;
+        }
+
+        fclose(fp);
+    }
+
+    return enabled;
+}
+
+// Init fips config
+static CRYPTO_ONCE fips_config = CRYPTO_ONCE_STATIC_INIT;
+DEFINE_RUN_ONCE_STATIC(ossl_init_fips_conf)
+{
+    g_fips_mode_enabled = 0;
+    if (ossl_fips_enabled_by_cmd() > 0){
+        g_fips_mode_enabled = 1;
+        return 1;
+    }
+
+    if (ossl_fips_enabled_by_conf() > 0){
+        g_fips_mode_enabled = 1;
+        return 1;
+    }
+
+    return 1;
+}
+
 /*
  * If this function is called with a non NULL settings value then it must be
  * called prior to any threads making calls to any OpenSSL functions,
@@ -723,9 +850,14 @@ int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
             && !RUN_ONCE(&engine_rdrand, ossl_init_engine_rdrand))
         return 0;
 # endif
-    if ((opts & OPENSSL_INIT_ENGINE_DYNAMIC)
-            && !RUN_ONCE(&engine_dynamic, ossl_init_engine_dynamic))
-        return 0;
+    if (opts & OPENSSL_INIT_ENGINE_DYNAMIC)
+    {
+        if (!RUN_ONCE(&engine_dynamic, ossl_init_engine_dynamic))
+            return 0;
+        RUN_ONCE(&fips_config, ossl_init_fips_conf);
+        if (g_fips_mode_enabled == 1)
+            RUN_ONCE(&engine_symcrypt, ossl_init_engine_symcrypt);
+    }
 # ifndef OPENSSL_NO_STATIC_ENGINE
 #  if !defined(OPENSSL_NO_HW) && !defined(OPENSSL_NO_HW_PADLOCK)
     if ((opts & OPENSSL_INIT_ENGINE_PADLOCK)
diff --git a/crypto/o_fips.c b/crypto/o_fips.c
index 050ea9c216..6e9ffdb1d9 100644
--- a/crypto/o_fips.c
+++ b/crypto/o_fips.c
@@ -9,8 +9,12 @@
 
 #include "internal/cryptlib.h"
 
+extern int g_fips_mode_enabled;
 int FIPS_mode(void)
 {
+    if (g_fips_mode_enabled == 1){
+        return g_fips_mode_enabled;
+    }
     /* This version of the library does not support FIPS mode. */
     return 0;
 }
diff --git a/crypto/engine/eng_all.c b/crypto/engine/eng_all.c
index 474a60c9bf..874744a69b 100644
--- a/crypto/engine/eng_all.c
+++ b/crypto/engine/eng_all.c
@@ -10,6 +10,13 @@
 #include "internal/cryptlib.h"
 #include "eng_local.h"
 
+__attribute__((constructor))
+void ENGINE_static_initializer(void)
+{
+    OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_DYNAMIC, NULL);
+}
+
+
 void ENGINE_load_builtin_engines(void)
 {
     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_ALL_BUILTIN, NULL);
diff --git a/engines/e_ossltest.c b/engines/e_ossltest.c
index 64376247c3..70c8b62a68 100644
--- a/engines/e_ossltest.c
+++ b/engines/e_ossltest.c
@@ -319,6 +319,10 @@ static int bind_ossltest(ENGINE *e)
         return 0;
     }
 
+    ENGINE* scossl = ENGINE_by_id("symcrypt");
+    ENGINE_unregister_pkey_meths(scossl);
+    ENGINE_free(scossl);
+
     return 1;
 }
 
