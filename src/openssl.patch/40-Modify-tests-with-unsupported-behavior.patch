From a836f47a338c02407a882b61cbb329c30ce08528 Mon Sep 17 00:00:00 2001
From: Maxwell Moyer-McKee <mamckee@microsoft.com>
Date: Mon, 13 May 2024 18:03:30 +0000
Subject: [PATCH] Modify tests with unsupported behavior

---
 test/aesgcmtest.c                   |  20 +-
 test/evp_kdf_test.c                 |  11 +-
 test/evp_pkey_provided_test.c       | 314 ++++++++++++++--------------
 test/hmactest.c                     |  41 ++--
 test/recipes/15-test_gendh.t        |   8 +-
 test/recipes/15-test_gendhparam.t   |  12 +-
 test/recipes/15-test_genec.t        |  25 ++-
 test/recipes/20-test_mac.t          |  20 +-
 test/recipes/25-test_verify.t       |  14 +-
 test/recipes/70-test_key_share.t    |   2 +-
 test/recipes/70-test_sslextension.t |  16 +-
 test/recipes/70-test_sslrecords.t   |  34 +--
 test/recipes/70-test_sslversions.t  |  36 ++--
 test/recipes/70-test_tls13hrr.t     |   4 +-
 14 files changed, 281 insertions(+), 276 deletions(-)

diff --git a/test/aesgcmtest.c b/test/aesgcmtest.c
index cdb0cbd0216df..ccd31b3cf083a 100644
--- a/test/aesgcmtest.c
+++ b/test/aesgcmtest.c
@@ -116,21 +116,21 @@ static int badkeylen_test(void)
     return ret;
 }
 
-static int ivgen_test(void)
-{
-    unsigned char iv_gen[16];
-    unsigned char tag[32];
-    unsigned char ct[32];
-    int ctlen = 0, taglen = 0;
+// static int ivgen_test(void)
+// {
+//     unsigned char iv_gen[16];
+//     unsigned char tag[32];
+//     unsigned char ct[32];
+//     int ctlen = 0, taglen = 0;
 
-    return do_encrypt(iv_gen, ct, &ctlen, tag, &taglen)
-           && do_decrypt(iv_gen, ct, ctlen, tag, taglen);
-}
+//     return do_encrypt(iv_gen, ct, &ctlen, tag, &taglen)
+//            && do_decrypt(iv_gen, ct, ctlen, tag, taglen);
+// }
 
 int setup_tests(void)
 {
     ADD_TEST(kat_test);
     ADD_TEST(badkeylen_test);
-    ADD_TEST(ivgen_test);
+    // ADD_TEST(ivgen_test);
     return 1;
 }
diff --git a/test/evp_kdf_test.c b/test/evp_kdf_test.c
index bab8da1cb8dfe..6ec07bc14b590 100644
--- a/test/evp_kdf_test.c
+++ b/test/evp_kdf_test.c
@@ -19,6 +19,7 @@
 #include "internal/numbers.h"
 #include "testutil.h"
 
+#define OPENSSL_NO_CMAC
 
 static EVP_KDF_CTX *get_kdfbyname_libctx(OSSL_LIB_CTX *libctx, const char *name)
 {
@@ -127,7 +128,7 @@ static int test_kdf_tls1_prf_empty_secret(void)
 
     ret = TEST_ptr(params)
         && TEST_ptr(kctx = get_kdfbyname(OSSL_KDF_NAME_TLS1_PRF))
-        && TEST_int_gt(EVP_KDF_derive(kctx, out, sizeof(out), params), 0);
+        && TEST_int_eq(EVP_KDF_derive(kctx, out, sizeof(out), params), 0);
 
     EVP_KDF_CTX_free(kctx);
     OPENSSL_free(params);
@@ -274,9 +275,9 @@ static int do_kdf_hkdf_gettables(int expand_only, int has_digest)
     }
 
     /* Get params returns -2 if an unsupported parameter is requested */
-    params_get[0] = OSSL_PARAM_construct_end();
-    if (!TEST_int_eq(EVP_KDF_CTX_get_params(kctx, params_get), -2))
-        goto err;
+    // params_get[0] = OSSL_PARAM_construct_end();
+    // if (!TEST_int_eq(EVP_KDF_CTX_get_params(kctx, params_get), -2))
+    //     goto err;
     ret = 1;
 err:
     EVP_KDF_CTX_free(kctx);
@@ -430,7 +431,7 @@ static int test_kdf_hkdf_empty_key(void)
 
     ret = TEST_ptr(params)
         && TEST_ptr(kctx = get_kdfbyname(OSSL_KDF_NAME_HKDF))
-        && TEST_int_gt(EVP_KDF_derive(kctx, out, sizeof(out), params), 0);
+        && TEST_int_eq(EVP_KDF_derive(kctx, out, sizeof(out), params), 0);
 
     EVP_KDF_CTX_free(kctx);
     OPENSSL_free(params);
diff --git a/test/evp_pkey_provided_test.c b/test/evp_pkey_provided_test.c
index 1aabfef893b08..fb817f155f68f 100644
--- a/test/evp_pkey_provided_test.c
+++ b/test/evp_pkey_provided_test.c
@@ -346,102 +346,102 @@ static int test_print_key_using_encoder_public(const char *alg,
 #define DQ      6
 #define QINV    7
 
-static int test_fromdata_rsa(void)
-{
-    int ret = 0, i;
-    EVP_PKEY_CTX *ctx = NULL, *key_ctx = NULL;
-    EVP_PKEY *pk = NULL, *copy_pk = NULL, *dup_pk = NULL;
-    /*
-     * 32-bit RSA key, extracted from this command,
-     * executed with OpenSSL 1.0.2:
-     *
-     * openssl genrsa 32 | openssl rsa -text
-     */
-    static unsigned long key_numbers[] = {
-        0xbc747fc5,              /* N */
-        0x10001,                 /* E */
-        0x7b133399,              /* D */
-        0xe963,                  /* P */
-        0xceb7,                  /* Q */
-        0x8599,                  /* DP */
-        0xbd87,                  /* DQ */
-        0xcc3b,                  /* QINV */
-    };
-    OSSL_PARAM fromdata_params[] = {
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_N, &key_numbers[N]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_E, &key_numbers[E]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_D, &key_numbers[D]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_FACTOR1, &key_numbers[P]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_FACTOR2, &key_numbers[Q]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_EXPONENT1, &key_numbers[DP]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_EXPONENT2, &key_numbers[DQ]),
-        OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_COEFFICIENT1, &key_numbers[QINV]),
-        OSSL_PARAM_END
-    };
-    BIGNUM *bn = BN_new();
-    BIGNUM *bn_from = BN_new();
-
-    if (!TEST_ptr(ctx = EVP_PKEY_CTX_new_from_name(NULL, "RSA", NULL)))
-        goto err;
-
-    if (!TEST_int_eq(EVP_PKEY_fromdata_init(ctx), 1)
-        || !TEST_int_eq(EVP_PKEY_fromdata(ctx, &pk, EVP_PKEY_KEYPAIR,
-                                          fromdata_params), 1))
-        goto err;
-
-    while (dup_pk == NULL) {
-        ret = 0;
-        if (!TEST_int_eq(EVP_PKEY_get_bits(pk), 32)
-            || !TEST_int_eq(EVP_PKEY_get_security_bits(pk), 8)
-            || !TEST_int_eq(EVP_PKEY_get_size(pk), 4)
-            || !TEST_false(EVP_PKEY_missing_parameters(pk)))
-            goto err;
-
-        EVP_PKEY_CTX_free(key_ctx);
-        if (!TEST_ptr(key_ctx = EVP_PKEY_CTX_new_from_pkey(NULL, pk, "")))
-            goto err;
-
-        if (!TEST_int_gt(EVP_PKEY_check(key_ctx), 0)
-            || !TEST_int_gt(EVP_PKEY_public_check(key_ctx), 0)
-            || !TEST_int_gt(EVP_PKEY_private_check(key_ctx), 0)
-            || !TEST_int_gt(EVP_PKEY_pairwise_check(key_ctx), 0))
-            goto err;
-
-        /* EVP_PKEY_copy_parameters() should fail for RSA */
-        if (!TEST_ptr(copy_pk = EVP_PKEY_new())
-            || !TEST_false(EVP_PKEY_copy_parameters(copy_pk, pk)))
-            goto err;
-        EVP_PKEY_free(copy_pk);
-        copy_pk = NULL;
-
-        ret = test_print_key_using_pem("RSA", pk)
-              && test_print_key_using_encoder("RSA", pk);
-
-        if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
-            goto err;
-        ret = ret && TEST_int_eq(EVP_PKEY_eq(pk, dup_pk), 1);
-        EVP_PKEY_free(pk);
-        pk = dup_pk;
-        if (!ret)
-            goto err;
-    }
- err:
-    /* for better diagnostics always compare key params */
-    for (i = 0; fromdata_params[i].key != NULL; ++i) {
-        if (!TEST_true(BN_set_word(bn_from, key_numbers[i]))
-            || !TEST_true(EVP_PKEY_get_bn_param(pk, fromdata_params[i].key, &bn))
-            || !TEST_BN_eq(bn, bn_from))
-            ret = 0;
-    }
-    BN_free(bn_from);
-    BN_free(bn);
-    EVP_PKEY_free(pk);
-    EVP_PKEY_free(copy_pk);
-    EVP_PKEY_CTX_free(key_ctx);
-    EVP_PKEY_CTX_free(ctx);
-
-    return ret;
-}
+// static int test_fromdata_rsa(void)
+// {
+//     int ret = 0, i;
+//     EVP_PKEY_CTX *ctx = NULL, *key_ctx = NULL;
+//     EVP_PKEY *pk = NULL, *copy_pk = NULL, *dup_pk = NULL;
+//     /*
+//      * 32-bit RSA key, extracted from this command,
+//      * executed with OpenSSL 1.0.2:
+//      *
+//      * openssl genrsa 32 | openssl rsa -text
+//      */
+//     static unsigned long key_numbers[] = {
+//         0xbc747fc5,              /* N */
+//         0x10001,                 /* E */
+//         0x7b133399,              /* D */
+//         0xe963,                  /* P */
+//         0xceb7,                  /* Q */
+//         0x8599,                  /* DP */
+//         0xbd87,                  /* DQ */
+//         0xcc3b,                  /* QINV */
+//     };
+//     OSSL_PARAM fromdata_params[] = {
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_N, &key_numbers[N]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_E, &key_numbers[E]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_D, &key_numbers[D]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_FACTOR1, &key_numbers[P]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_FACTOR2, &key_numbers[Q]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_EXPONENT1, &key_numbers[DP]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_EXPONENT2, &key_numbers[DQ]),
+//         OSSL_PARAM_ulong(OSSL_PKEY_PARAM_RSA_COEFFICIENT1, &key_numbers[QINV]),
+//         OSSL_PARAM_END
+//     };
+//     BIGNUM *bn = BN_new();
+//     BIGNUM *bn_from = BN_new();
+
+//     if (!TEST_ptr(ctx = EVP_PKEY_CTX_new_from_name(NULL, "RSA", NULL)))
+//         goto err;
+
+//     if (!TEST_int_eq(EVP_PKEY_fromdata_init(ctx), 1)
+//         || !TEST_int_eq(EVP_PKEY_fromdata(ctx, &pk, EVP_PKEY_KEYPAIR,
+//                                           fromdata_params), 1))
+//         goto err;
+
+//     while (dup_pk == NULL) {
+//         ret = 0;
+//         if (!TEST_int_eq(EVP_PKEY_get_bits(pk), 32)
+//             || !TEST_int_eq(EVP_PKEY_get_security_bits(pk), 8)
+//             || !TEST_int_eq(EVP_PKEY_get_size(pk), 4)
+//             || !TEST_false(EVP_PKEY_missing_parameters(pk)))
+//             goto err;
+
+//         EVP_PKEY_CTX_free(key_ctx);
+//         if (!TEST_ptr(key_ctx = EVP_PKEY_CTX_new_from_pkey(NULL, pk, "")))
+//             goto err;
+
+//         if (!TEST_int_gt(EVP_PKEY_check(key_ctx), 0)
+//             || !TEST_int_gt(EVP_PKEY_public_check(key_ctx), 0)
+//             || !TEST_int_gt(EVP_PKEY_private_check(key_ctx), 0)
+//             || !TEST_int_gt(EVP_PKEY_pairwise_check(key_ctx), 0))
+//             goto err;
+
+//         /* EVP_PKEY_copy_parameters() should fail for RSA */
+//         if (!TEST_ptr(copy_pk = EVP_PKEY_new())
+//             || !TEST_false(EVP_PKEY_copy_parameters(copy_pk, pk)))
+//             goto err;
+//         EVP_PKEY_free(copy_pk);
+//         copy_pk = NULL;
+
+//         ret = test_print_key_using_pem("RSA", pk)
+//               && test_print_key_using_encoder("RSA", pk);
+
+//         if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
+//             goto err;
+//         ret = ret && TEST_int_eq(EVP_PKEY_eq(pk, dup_pk), 1);
+//         EVP_PKEY_free(pk);
+//         pk = dup_pk;
+//         if (!ret)
+//             goto err;
+//     }
+//  err:
+//     /* for better diagnostics always compare key params */
+//     for (i = 0; fromdata_params[i].key != NULL; ++i) {
+//         if (!TEST_true(BN_set_word(bn_from, key_numbers[i]))
+//             || !TEST_true(EVP_PKEY_get_bn_param(pk, fromdata_params[i].key, &bn))
+//             || !TEST_BN_eq(bn, bn_from))
+//             ret = 0;
+//     }
+//     BN_free(bn_from);
+//     BN_free(bn);
+//     EVP_PKEY_free(pk);
+//     EVP_PKEY_free(copy_pk);
+//     EVP_PKEY_CTX_free(key_ctx);
+//     EVP_PKEY_CTX_free(ctx);
+
+//     return ret;
+// }
 
 static int test_evp_pkey_get_bn_param_large(void)
 {
@@ -679,8 +679,8 @@ static int test_fromdata_dh_named_group(void)
         EVP_PKEY_free(copy_pk);
         copy_pk = NULL;
 
-        ret = test_print_key_using_pem("DH", pk)
-              && test_print_key_using_encoder("DH", pk);
+        ret = test_print_key_using_pem("DH", pk);
+            //   && test_print_key_using_encoder("DH", pk);
 
         if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
             goto err;
@@ -854,8 +854,8 @@ static int test_fromdata_dh_fips186_4(void)
         EVP_PKEY_CTX_free(key_ctx);
         key_ctx = NULL;
 
-        ret = test_print_key_using_pem("DH", pk)
-              && test_print_key_using_encoder("DH", pk);
+        ret = test_print_key_using_pem("DH", pk);
+            //   && test_print_key_using_encoder("DH", pk);
 
         if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
             goto err;
@@ -1136,8 +1136,8 @@ static int test_fromdata_ecx(int tst)
         if (tst > 7)
             ret = test_print_key_using_encoder_public(alg, pk);
         else
-            ret = test_print_key_using_pem(alg, pk)
-                  && test_print_key_using_encoder(alg, pk);
+            ret = test_print_key_using_pem(alg, pk);
+                //   && test_print_key_using_encoder(alg, pk);
 
         if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
             goto err;
@@ -1260,7 +1260,7 @@ static int test_fromdata_ec(void)
         ret = 0;
         if (!TEST_int_eq(EVP_PKEY_get_bits(pk), 256)
             || !TEST_int_eq(EVP_PKEY_get_security_bits(pk), 128)
-            || !TEST_int_eq(EVP_PKEY_get_size(pk), 2 + 35 * 2)
+            || !TEST_int_eq(EVP_PKEY_get_size(pk), 7 + 32 * 2)
             || !TEST_false(EVP_PKEY_missing_parameters(pk)))
             goto err;
 
@@ -1286,14 +1286,14 @@ static int test_fromdata_ec(void)
             || !TEST_true(EC_GROUP_get_curve(group, group_p, group_a, group_b, NULL)))
             goto err;
 
-        if (!TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_A, &a))
-            || !TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_B, &b))
-            || !TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_P, &p)))
-            goto err;
+        // if (!TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_A, &a))
+        //     || !TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_B, &b))
+        //     || !TEST_true(EVP_PKEY_get_bn_param(pk, OSSL_PKEY_PARAM_EC_P, &p)))
+        //     goto err;
 
-        if (!TEST_BN_eq(group_p, p) || !TEST_BN_eq(group_a, a)
-            || !TEST_BN_eq(group_b, b))
-            goto err;
+        // if (!TEST_BN_eq(group_p, p) || !TEST_BN_eq(group_a, a)
+        //     || !TEST_BN_eq(group_b, b))
+        //     goto err;
 
         if (!EVP_PKEY_get_utf8_string_param(pk, OSSL_PKEY_PARAM_GROUP_NAME,
                                             out_curve_name,
@@ -1320,8 +1320,8 @@ static int test_fromdata_ec(void)
         BN_free(bn_priv);
         bn_priv = NULL;
 
-        ret = test_print_key_using_pem(alg, pk)
-              && test_print_key_using_encoder(alg, pk);
+        ret = test_print_key_using_pem(alg, pk);
+            //   && test_print_key_using_encoder(alg, pk);
 
         if (!ret || !TEST_ptr(dup_pk = EVP_PKEY_dup(pk)))
             goto err;
@@ -1703,51 +1703,51 @@ static int test_check_dsa(void)
 #endif /* OPENSSL_NO_DSA */
 
 
-static OSSL_PARAM *do_construct_hkdf_params(char *digest, char *key,
-                                            size_t keylen, char *salt)
-{
-    OSSL_PARAM *params = OPENSSL_malloc(sizeof(OSSL_PARAM) * 5);
-    OSSL_PARAM *p = params;
-
-    *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST, digest, 0);
-    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT,
-                                             salt, strlen(salt));
-    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,
-                                             (unsigned char *)key, keylen);
-    *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_MODE,
-                                            "EXTRACT_ONLY", 0);
-    *p = OSSL_PARAM_construct_end();
-
-    return params;
-}
+// static OSSL_PARAM *do_construct_hkdf_params(char *digest, char *key,
+//                                             size_t keylen, char *salt)
+// {
+//     OSSL_PARAM *params = OPENSSL_malloc(sizeof(OSSL_PARAM) * 5);
+//     OSSL_PARAM *p = params;
 
-/* Test that EVP_PKEY_CTX_dup() fails gracefully for a KDF */
-static int test_evp_pkey_ctx_dup_kdf_fail(void)
-{
-    int ret = 0;
-    size_t len = 0;
-    EVP_PKEY_CTX *pctx = NULL, *dctx = NULL;
-    OSSL_PARAM *params = NULL;
+//     *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST, digest, 0);
+//     *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT,
+//                                              salt, strlen(salt));
+//     *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,
+//                                              (unsigned char *)key, keylen);
+//     *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_MODE,
+//                                             "EXTRACT_ONLY", 0);
+//     *p = OSSL_PARAM_construct_end();
 
-    if (!TEST_ptr(params = do_construct_hkdf_params("sha256", "secret", 6,
-                                                    "salt")))
-        goto err;
-    if (!TEST_ptr(pctx = EVP_PKEY_CTX_new_from_name(NULL, "HKDF", NULL)))
-        goto err;
-    if (!TEST_int_eq(EVP_PKEY_derive_init_ex(pctx, params), 1))
-        goto err;
-    if (!TEST_int_eq(EVP_PKEY_derive(pctx, NULL, &len), 1)
-        || !TEST_size_t_eq(len, SHA256_DIGEST_LENGTH))
-        goto err;
-    if (!TEST_ptr_null(dctx = EVP_PKEY_CTX_dup(pctx)))
-        goto err;
-    ret = 1;
-err:
-    OPENSSL_free(params);
-    EVP_PKEY_CTX_free(dctx);
-    EVP_PKEY_CTX_free(pctx);
-    return ret;
-}
+//     return params;
+// }
+
+/* Test that EVP_PKEY_CTX_dup() fails gracefully for a KDF */
+// static int test_evp_pkey_ctx_dup_kdf_fail(void)
+// {
+//     int ret = 0;
+//     size_t len = 0;
+//     EVP_PKEY_CTX *pctx = NULL, *dctx = NULL;
+//     OSSL_PARAM *params = NULL;
+
+//     if (!TEST_ptr(params = do_construct_hkdf_params("sha256", "secret", 6,
+//                                                     "salt")))
+//         goto err;
+//     if (!TEST_ptr(pctx = EVP_PKEY_CTX_new_from_name(NULL, "HKDF", NULL)))
+//         goto err;
+//     if (!TEST_int_eq(EVP_PKEY_derive_init_ex(pctx, params), 1))
+//         goto err;
+//     if (!TEST_int_eq(EVP_PKEY_derive(pctx, NULL, &len), 1)
+//         || !TEST_size_t_eq(len, SHA256_DIGEST_LENGTH))
+//         goto err;
+//     if (!TEST_ptr_null(dctx = EVP_PKEY_CTX_dup(pctx)))
+//         goto err;
+//     ret = 1;
+// err:
+//     OPENSSL_free(params);
+//     EVP_PKEY_CTX_free(dctx);
+//     EVP_PKEY_CTX_free(pctx);
+//     return ret;
+// }
 
 int setup_tests(void)
 {
@@ -1759,9 +1759,9 @@ int setup_tests(void)
     if (!TEST_ptr(datadir = test_get_argument(0)))
         return 0;
 
-    ADD_TEST(test_evp_pkey_ctx_dup_kdf_fail);
+    // ADD_TEST(test_evp_pkey_ctx_dup_kdf_fail);
     ADD_TEST(test_evp_pkey_get_bn_param_large);
-    ADD_TEST(test_fromdata_rsa);
+    // ADD_TEST(test_fromdata_rsa);
 #ifndef OPENSSL_NO_DH
     ADD_TEST(test_fromdata_dh_fips186_4);
     ADD_TEST(test_fromdata_dh_named_group);
diff --git a/test/hmactest.c b/test/hmactest.c
index 8f5bf32f87089..ecae245edc439 100644
--- a/test/hmactest.c
+++ b/test/hmactest.c
@@ -11,6 +11,7 @@
  * HMAC low level APIs are deprecated for public use, but still ok for internal
  * use.
  */
+
 #include "internal/deprecated.h"
 
 #include <stdio.h>
@@ -84,25 +85,25 @@ static struct test_st {
 static char *pt(unsigned char *md, unsigned int len);
 
 
-# ifndef OPENSSL_NO_MD5
-static int test_hmac_md5(int idx)
-{
-    char *p;
-#  ifdef CHARSET_EBCDIC
-    ebcdic2ascii(test[0].data, test[0].data, test[0].data_len);
-    ebcdic2ascii(test[1].data, test[1].data, test[1].data_len);
-    ebcdic2ascii(test[2].key, test[2].key, test[2].key_len);
-    ebcdic2ascii(test[2].data, test[2].data, test[2].data_len);
-#  endif
-
-    p = pt(HMAC(EVP_md5(),
-                test[idx].key, test[idx].key_len,
-                test[idx].data, test[idx].data_len, NULL, NULL),
-                MD5_DIGEST_LENGTH);
-
-    return TEST_ptr(p) && TEST_str_eq(p, test[idx].digest);
-}
-# endif
+// # ifndef OPENSSL_NO_MD5
+// static int test_hmac_md5(int idx)
+// {
+//     char *p;
+// #  ifdef CHARSET_EBCDIC
+//     ebcdic2ascii(test[0].data, test[0].data, test[0].data_len);
+//     ebcdic2ascii(test[1].data, test[1].data, test[1].data_len);
+//     ebcdic2ascii(test[2].key, test[2].key, test[2].key_len);
+//     ebcdic2ascii(test[2].data, test[2].data, test[2].data_len);
+// #  endif
+
+//     p = pt(HMAC(EVP_md5(),
+//                 test[idx].key, test[idx].key_len,
+//                 test[idx].data, test[idx].data_len, NULL, NULL),
+//                 MD5_DIGEST_LENGTH);
+
+//     return TEST_ptr(p) && TEST_str_eq(p, test[idx].digest);
+// }
+// # endif
 
 static int test_hmac_bad(void)
 {
@@ -291,7 +292,7 @@ static char *pt(unsigned char *md, unsigned int len)
 
 int setup_tests(void)
 {
-    ADD_ALL_TESTS(test_hmac_md5, 4);
+    // ADD_ALL_TESTS(test_hmac_md5, 4);
     ADD_TEST(test_hmac_single_shot);
     ADD_TEST(test_hmac_bad);
     ADD_TEST(test_hmac_run);
diff --git a/test/recipes/15-test_gendh.t b/test/recipes/15-test_gendh.t
index 015a974eea193..c89b9dddc150d 100644
--- a/test/recipes/15-test_gendh.t
+++ b/test/recipes/15-test_gendh.t
@@ -18,7 +18,7 @@ setup("test_gendh");
 
 plan skip_all => "This test is unsupported in a no-dh build" if disabled("dh");
 
-plan tests => 9;
+plan tests => 8;
 
 ok(run(app([ 'openssl', 'genpkey', '-algorithm', 'DH',
              '-pkeyopt', 'type:group',
@@ -48,9 +48,9 @@ ok(run(app([ 'openssl', 'genpkey',
              '-text' ])),
    "genpkey DH fips186_4 with PEM params");
 
- ok(!run(app([ 'openssl', 'genpkey',
-              '-algorithm', 'DH'])),
-   "genpkey DH with no params should fail");
+#  ok(!run(app([ 'openssl', 'genpkey',
+#               '-algorithm', 'DH'])),
+#    "genpkey DH with no params should fail");
 
  ok(!run(app([ 'openssl', 'genpkey', '-algorithm', 'DH', '-pkeyopt',
                'group:ffdhe3072', '-pkeyopt', 'priv_len:255', '-text'])),
diff --git a/test/recipes/15-test_gendhparam.t b/test/recipes/15-test_gendhparam.t
index 18ff86e63f9e6..3491c7dfbaa29 100644
--- a/test/recipes/15-test_gendhparam.t
+++ b/test/recipes/15-test_gendhparam.t
@@ -57,12 +57,12 @@ my @testdata = (
         expect => [ 'BEGIN DH PARAMETERS', 'GROUP:' ],
         message   => 'DH named group ffdhe selection',
     },
-    {
-        algorithm => 'DH',
-        pkeyopts => [ 'dh_param:ffdhe8192'],
-        expect => [ 'BEGIN DH PARAMETERS', 'GROUP:' ],
-        message   => 'DH named group ffdhe selection using alias',
-    },
+    # {
+    #     algorithm => 'DH',
+    #     pkeyopts => [ 'dh_param:ffdhe8192'],
+    #     expect => [ 'BEGIN DH PARAMETERS', 'GROUP:' ],
+    #     message   => 'DH named group ffdhe selection using alias',
+    # },
     {
         algorithm => 'DH',
         pkeyopts => [ 'group:modp_3072'],
diff --git a/test/recipes/15-test_genec.t b/test/recipes/15-test_genec.t
index 2dfed387ca061..af2da736fd4ae 100644
--- a/test/recipes/15-test_genec.t
+++ b/test/recipes/15-test_genec.t
@@ -126,10 +126,10 @@ my @binary_curves = qw(
 );
 
 my @explicit_only_curves = ();
-push(@explicit_only_curves, qw(
-        Oakley-EC2N-3
-        Oakley-EC2N-4
-    )) if !disabled("ec2m");
+# push(@explicit_only_curves, qw(
+#         Oakley-EC2N-3
+#         Oakley-EC2N-4
+#     )) if !disabled("ec2m");
 
 my @other_curves = ();
 push(@other_curves, 'SM2')
@@ -155,17 +155,20 @@ push(@curve_aliases, qw(
     K-571
 )) if !disabled("ec2m");
 
-my @curve_list = ();
-push(@curve_list, @prime_curves);
-push(@curve_list, @binary_curves)
-    if !disabled("ec2m");
-push(@curve_list, @other_curves);
-push(@curve_list, @curve_aliases);
+my @curve_list = qw(
+    prime192v1
+    prime256v1
+    P-192
+    P-224
+    P-256
+    P-384
+    P-521
+);
 
 my %params_encodings =
     (
      'named_curve'      => \&supported_pass,
-     'explicit'         => \&supported_pass
+    #  'explicit'         => \&supported_pass
     );
 
 my @output_formats = ('PEM', 'DER');
diff --git a/test/recipes/20-test_mac.t b/test/recipes/20-test_mac.t
index cc25e774535f6..1aabab7277bca 100644
--- a/test/recipes/20-test_mac.t
+++ b/test/recipes/20-test_mac.t
@@ -27,16 +27,16 @@ my @mac_tests = (
       input => unpack("H*", "Sample message for keylen=blocklen"),
       expected => '5FD596EE78D5553C8FF4E72D266DFD192366DA29',
       desc => 'HMAC SHA1 via -macopt' },
-   { cmd => [qw{openssl mac -cipher AES-256-GCM -macopt hexkey:4C973DBC7364621674F8B5B89E5C15511FCED9216490FB1C1A2CAA0FFE0407E5 -macopt hexiv:7AE8E2CA4EC500012E58495C}],
-     type => 'GMAC',
-     input => '68F2E77696CE7AE8E2CA4EC588E541002E58495C08000F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D0007',
-     expected => '00BDA1B7E87608BCBF470F12157F4C07',
-     desc => 'GMAC' },
-   { cmd => [qw{openssl mac -macopt cipher:AES-256-GCM -macopt hexkey:4C973DBC7364621674F8B5B89E5C15511FCED9216490FB1C1A2CAA0FFE0407E5 -macopt hexiv:7AE8E2CA4EC500012E58495C}],
-     type => 'GMAC',
-     input => '68F2E77696CE7AE8E2CA4EC588E541002E58495C08000F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D0007',
-     expected => '00BDA1B7E87608BCBF470F12157F4C07',
-     desc => 'GMAC via -macopt' },
+  #  { cmd => [qw{openssl mac -cipher AES-256-GCM -macopt hexkey:4C973DBC7364621674F8B5B89E5C15511FCED9216490FB1C1A2CAA0FFE0407E5 -macopt hexiv:7AE8E2CA4EC500012E58495C}],
+  #    type => 'GMAC',
+  #    input => '68F2E77696CE7AE8E2CA4EC588E541002E58495C08000F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D0007',
+  #    expected => '00BDA1B7E87608BCBF470F12157F4C07',
+  #    desc => 'GMAC' },
+  #  { cmd => [qw{openssl mac -macopt cipher:AES-256-GCM -macopt hexkey:4C973DBC7364621674F8B5B89E5C15511FCED9216490FB1C1A2CAA0FFE0407E5 -macopt hexiv:7AE8E2CA4EC500012E58495C}],
+  #    type => 'GMAC',
+  #    input => '68F2E77696CE7AE8E2CA4EC588E541002E58495C08000F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D0007',
+  #    expected => '00BDA1B7E87608BCBF470F12157F4C07',
+  #    desc => 'GMAC via -macopt' },
    { cmd => [qw{openssl mac -macopt hexkey:404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F -macopt xof:0}],
      type => 'KMAC128',
      input => '00010203',
diff --git a/test/recipes/25-test_verify.t b/test/recipes/25-test_verify.t
index 818c9ac50dd3f..95b91d870d340 100644
--- a/test/recipes/25-test_verify.t
+++ b/test/recipes/25-test_verify.t
@@ -29,7 +29,7 @@ sub verify {
     run(app([@args]));
 }
 
-plan tests => 166;
+plan tests => 163;
 
 # Canonical success
 ok(verify("ee-cert", "sslserver", ["root-cert"], ["ca-cert"]),
@@ -286,14 +286,14 @@ ok(verify("ee-cert", "", ["root-cert-md5"], ["ca-cert"], "-auth_level", "2"),
    "accept md5 self-signed TA at auth level 2");
 ok(verify("ee-cert", "", ["ca-cert-md5-any"], [], "-auth_level", "2"),
    "accept md5 intermediate TA at auth level 2");
-ok(verify("ee-cert", "", ["root-cert"], ["ca-cert-md5"], "-auth_level", "0"),
-   "accept md5 intermediate at auth level 0");
+# ok(verify("ee-cert", "", ["root-cert"], ["ca-cert-md5"], "-auth_level", "0"),
+#    "accept md5 intermediate at auth level 0");
 ok(!verify("ee-cert", "", ["root-cert"], ["ca-cert-md5"]),
    "reject md5 intermediate at auth level 1");
-ok(verify("ee-cert-md5", "", ["root-cert"], ["ca-cert"], "-auth_level", "0"),
-   "accept md5 leaf at auth level 0");
-ok(!verify("ee-cert-md5", "", ["root-cert"], ["ca-cert"]),
-   "reject md5 leaf at auth level 1");
+# ok(verify("ee-cert-md5", "", ["root-cert"], ["ca-cert"], "-auth_level", "0"),
+#    "accept md5 leaf at auth level 0");
+# ok(!verify("ee-cert-md5", "", ["root-cert"], ["ca-cert"]),
+#    "reject md5 leaf at auth level 1");
 
 # Explicit vs named curve tests
 SKIP: {
diff --git a/test/recipes/70-test_key_share.t b/test/recipes/70-test_key_share.t
index 91ca8a4ff997a..a6c7cd50dbd26 100644
--- a/test/recipes/70-test_key_share.t
+++ b/test/recipes/70-test_key_share.t
@@ -254,7 +254,7 @@ $proxy->start();
 ok(TLSProxy::Message->fail(), "key_share trailing data in ServerHello");
 
 SKIP: {
-    skip "No TLSv1.2 support in this OpenSSL build", 2 if disabled("tls1_2");
+    skip "Unsupported padding", 2 if 1;
 
     #Test 20: key_share should not be sent if the client is not capable of
     #         negotiating TLSv1.3
diff --git a/test/recipes/70-test_sslextension.t b/test/recipes/70-test_sslextension.t
index c1893b8f06e77..35b0f4f540385 100644
--- a/test/recipes/70-test_sslextension.t
+++ b/test/recipes/70-test_sslextension.t
@@ -191,7 +191,7 @@ sub inject_cryptopro_extension
 
 # Test 1-2: Sending a duplicate extension should fail.
 $proxy->start() or plan skip_all => "Unable to start up Proxy for tests";
-plan tests => 8;
+plan tests => 7;
 ok($fatal_alert, "Duplicate ClientHello extension");
 
 SKIP: {
@@ -204,13 +204,13 @@ SKIP: {
     $proxy->start();
     ok($fatal_alert, "Duplicate ServerHello extension");
 
-    #Test 3: Sending a zero length extension block should pass
-    $proxy->clear();
-    $proxy->filter(\&extension_filter);
-    $proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
-    $proxy->clientflags("-no_tls1_3");
-    $proxy->start();
-    ok(TLSProxy::Message->success, "Zero extension length test");
+    # #Test 3: Sending a zero length extension block should pass
+    # $proxy->clear();
+    # $proxy->filter(\&extension_filter);
+    # $proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
+    # $proxy->clientflags("-no_tls1_3");
+    # $proxy->start();
+    # ok(TLSProxy::Message->success, "Zero extension length test");
 
     #Test 4: Inject an unsolicited extension (<= TLSv1.2)
     $fatal_alert = 0;
diff --git a/test/recipes/70-test_sslrecords.t b/test/recipes/70-test_sslrecords.t
index 318c9235b0c9f..4997c6dc6b3e8 100644
--- a/test/recipes/70-test_sslrecords.t
+++ b/test/recipes/70-test_sslrecords.t
@@ -45,7 +45,7 @@ my $inject_recs_num = 1;
 $proxy->serverflags("-tls1_2");
 $proxy->clientflags("-no_tls1_3");
 $proxy->start() or plan skip_all => "Unable to start up Proxy for tests";
-plan tests => 20;
+plan tests => 18;
 ok($fatal_alert, "Out of context empty records test");
 
 #Test 2: Injecting in context empty records should succeed
@@ -92,19 +92,19 @@ use constant {
 # which signature algorithm we want to use, and the default is SHA1.
 
 #Test 5: Inject an SSLv2 style record format for a TLSv1.2 ClientHello
-my $sslv2testtype = TLSV1_2_IN_SSLV2;
-$proxy->clear();
-$proxy->filter(\&add_sslv2_filter);
-$proxy->serverflags("-tls1_2");
-$proxy->clientflags("-no_tls1_3 -legacy_renegotiation");
-$proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
-$proxy->start();
-ok(TLSProxy::Message->success(), "TLSv1.2 in SSLv2 ClientHello test");
+# my $sslv2testtype = TLSV1_2_IN_SSLV2;
+# $proxy->clear();
+# $proxy->filter(\&add_sslv2_filter);
+# $proxy->serverflags("-tls1_2");
+# $proxy->clientflags("-no_tls1_3 -legacy_renegotiation");
+# $proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
+# $proxy->start();
+# ok(TLSProxy::Message->success(), "TLSv1.2 in SSLv2 ClientHello test");
 
 #Test 6: Inject an SSLv2 style record format for an SSLv2 ClientHello. We don't
 #        support this so it should fail. We actually treat it as an unknown
 #        protocol so we don't even send an alert in this case.
-$sslv2testtype = SSLV2_IN_SSLV2;
+my $sslv2testtype = SSLV2_IN_SSLV2;
 $proxy->clear();
 $proxy->serverflags("-tls1_2");
 $proxy->clientflags("-no_tls1_3");
@@ -115,13 +115,13 @@ ok(TLSProxy::Message->fail(), "SSLv2 in SSLv2 ClientHello test");
 #Test 7: Sanity check ClientHello fragmentation. This isn't really an SSLv2 test
 #        at all, but it gives us confidence that Test 8 fails for the right
 #        reasons
-$sslv2testtype = FRAGMENTED_IN_TLSV1_2;
-$proxy->clear();
-$proxy->serverflags("-tls1_2");
-$proxy->clientflags("-no_tls1_3");
-$proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
-$proxy->start();
-ok(TLSProxy::Message->success(), "Fragmented ClientHello in TLSv1.2 test");
+# $sslv2testtype = FRAGMENTED_IN_TLSV1_2;
+# $proxy->clear();
+# $proxy->serverflags("-tls1_2");
+# $proxy->clientflags("-no_tls1_3");
+# $proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
+# $proxy->start();
+# ok(TLSProxy::Message->success(), "Fragmented ClientHello in TLSv1.2 test");
 
 #Test 8: Fragment a TLSv1.2 ClientHello across a TLS1.2 record; an SSLv2
 #        record; and another TLS1.2 record. This isn't allowed so should fail
diff --git a/test/recipes/70-test_sslversions.t b/test/recipes/70-test_sslversions.t
index 2123860d9cb44..b70fa64b1ead2 100644
--- a/test/recipes/70-test_sslversions.t
+++ b/test/recipes/70-test_sslversions.t
@@ -59,7 +59,7 @@ my $proxy = TLSProxy::Proxy->new(
 $testtype = EMPTY_EXTENSION;
 $proxy->filter(\&modify_supported_versions_filter);
 $proxy->start() or plan skip_all => "Unable to start up Proxy for tests";
-plan tests => 8;
+plan tests => 6;
 ok(TLSProxy::Message->fail(), "Empty supported versions");
 
 #Test 2: supported_versions extension with no recognised versions should not
@@ -70,13 +70,13 @@ $proxy->start();
 ok(TLSProxy::Message->fail(), "No recognised versions");
 
 #Test 3: No supported versions extensions should succeed and select TLSv1.2
-$proxy->clear();
-$testtype = NO_EXTENSION;
-$proxy->start();
-my $record = pop @{$proxy->record_list};
-ok(TLSProxy::Message->success()
-   && $record->version() == TLSProxy::Record::VERS_TLS_1_2,
-   "No supported versions extension");
+# $proxy->clear();
+# $testtype = NO_EXTENSION;
+# $proxy->start();
+# my $record = pop @{$proxy->record_list};
+# ok(TLSProxy::Message->success()
+#    && $record->version() == TLSProxy::Record::VERS_TLS_1_2,
+#    "No supported versions extension");
 
 #Test 4: No supported versions extensions should fail if only TLS1.3 available
 $proxy->clear();
@@ -89,7 +89,7 @@ ok(TLSProxy::Message->fail(), "No supported versions extension (only TLS1.3)");
 $proxy->clear();
 $testtype = REVERSE_ORDER_VERSIONS;
 $proxy->start();
-$record = pop @{$proxy->record_list};
+my $record = pop @{$proxy->record_list};
 ok(TLSProxy::Message->success()
    && $record->version() == TLSProxy::Record::VERS_TLS_1_2
    && TLSProxy::Proxy->is_tls13(),
@@ -97,15 +97,15 @@ ok(TLSProxy::Message->success()
 
 #Test 6: no TLSv1.3 or TLSv1.2 version in supported versions extension, but
 #TLSv1.1 and TLSv1.0 are present. Should just use TLSv1.1 and succeed
-$proxy->clear();
-$proxy->clientflags("-cipher DEFAULT:\@SECLEVEL=0");
-$proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
-$testtype = TLS1_1_AND_1_0_ONLY;
-$proxy->start();
-$record = pop @{$proxy->record_list};
-ok(TLSProxy::Message->success()
-   && $record->version() == TLSProxy::Record::VERS_TLS_1_1,
-   "TLS1.1 and TLS1.0 in supported versions extension only");
+# $proxy->clear();
+# $proxy->clientflags("-cipher DEFAULT:\@SECLEVEL=0");
+# $proxy->ciphers("AES128-SHA:\@SECLEVEL=0");
+# $testtype = TLS1_1_AND_1_0_ONLY;
+# $proxy->start();
+# $record = pop @{$proxy->record_list};
+# ok(TLSProxy::Message->success()
+#    && $record->version() == TLSProxy::Record::VERS_TLS_1_1,
+#    "TLS1.1 and TLS1.0 in supported versions extension only");
 
 #Test 7: TLS1.4 and TLS1.3 in supported versions. Should succeed and use TLS1.3
 $proxy->clear();
diff --git a/test/recipes/70-test_tls13hrr.t b/test/recipes/70-test_tls13hrr.t
index 9d0694c3d6ecd..adc11465ef76a 100644
--- a/test/recipes/70-test_tls13hrr.t
+++ b/test/recipes/70-test_tls13hrr.t
@@ -88,8 +88,8 @@ ok($fatal_alert, "Server duplicated HRR");
 #        TLSv1.3. We expect the server to select X25519 in the HRR and the
 #        handshake to complete successfully
 SKIP: {
-    skip "EC/TLSv1.2 is disabled in this build", 1
-        if disabled("ec") || disabled("tls1_2");
+    skip "Brainpool disabled in server", 1
+        if 1;
 
     $proxy->clear();
     $proxy->clientflags("-groups P-256:brainpoolP512r1:X25519");
